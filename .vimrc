" courtesy of ygrek
" modified by zhelih
"
" see http://www.ocaml.info/vimrc

:set fileencodings=utf-8,cp1251
:set background=dark

" xterm16
let xterm16_colormap = 'allblue'
let xterm16_brightness = 'high'
let xterm16bg_Normal = 'none'
" colo xterm16
" colo ibmedit

let maplocalleader="\<space>"

call pathogen#infect()

" default C-C is a big mess up, C-S doesn't workd because terminal but who cares
let g:ftplugin_sql_omni_key       = '<C-S>'
let g:SuperTabDefaultCompletionType = "context"

" gx to open URLs in Firefox
let g:netrw_browsex_viewer= "firefox"

let ignore = '\v\~$'
let ignore .= '|\.(a|so|o|exe|dll|bak|orig|swp|cm.+|annot|byte|native)$'
let ignore .= '|(^|[/\\])(_o?build|elm-stuff|\.(hg|git|bzr))($|[/\\])'

"FuzzyFinder should ignore all files in .gitignore
if filereadable(".gitignore")
  for line in readfile(".gitignore")
    let line = substitute(line, '\.', '\\.', 'g')
    let line = substitute(line, '\~', '\\~', 'g')
    let line = substitute(line, '\*', '.*', 'g')
    let line = substitute(line, ' ', '', 'g')
    if strlen(line) > 0
      let ignore .= '|^' . line
    endif
  endfor
endif

function! FzyCommand(input, choice_command, vim_command)
  try
    let output = system(a:choice_command,a:input)
  catch /Vim:Interrupt/
    " Swallow errors from ^C, allow redraw! below
  endtry
  let output = substitute(output, '\n\+$', '', '')
  redraw!
  if v:shell_error == 0 && !empty(output)
    exec a:vim_command . escape(output,'/\')
  endif
endfunction

nnoremap <LocalLeader>e :call FzyCommand("", "rg . -L -l -g '' < /dev/null 2> /dev/null \| fzy", ":e ")<cr>
nnoremap <LocalLeader>i :call FzyCommand(join(getline(1, '$'), "\n"), "fzy", "/\\V")<cr>

" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_mode_map = { "mode": "passive", "active_filetypes": ["ocaml","rust","sh"] }
let g:syntastic_ocaml_checkers = ['merlin']
let g:syntastic_rust_checkers = ['rustc']
let g:syntastic_sh_checkers = ['shellcheck']
let g:elm_syntastic_show_warnings = 1

" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme = 'minimalist'

" let g:indentLine_setConceal = 0
" let g:indentLine_concealcursor = 'vc'

set modelines=0
set nomodeline

set noshowmode

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:racer_cmd = "/home/user/.cargo/bin/racer"

au FileType rust nmap gd <Plug>(rust-def)
au FileType rust nmap <leader>gd <Plug>(rust-doc)

if executable('rls')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'rls',
        \ 'cmd': {server_info->['rustup', 'run', 'nightly', 'rls']},
        \ 'whitelist': ['rust'],
        \ })
endif

if 0 == 1
  call dein#add('w0rp/ale')

  let g:ale_rust_rls_toolchain = '<version in Makefile>'
  let g:ale_completion_enabled = 1
  let g:ale_set_balloons = 1

  let g:ale_linters = {
        \ 'rust': ['rls'],
        \ 'ocaml': ['merlin'],
        \}

  autocmd FileType rust  nnoremap <buffer> <silent> <LocalLeader>t :ALEHover<CR>
  autocmd FileType rust  nnoremap <buffer> <silent> <LocalLeader>d :ALEGoToDefinition<CR>

  call dein#add('sbdchd/neoformat')
endif

" https://elliotekj.com/2016/11/22/setup-ctrlp-to-use-ripgrep-in-vim/
set wildignore+=*/.git/*,*.swp,*/_build/*

if executable('rg')
  " https://github.com/BurntSushi/ripgrep/issues/425
  set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
  set grepformat=%f:%l:%c:%m,%f:%l:%m
  let g:ackprg = &grepprg
  "let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
  "let g:ctrlp_use_caching = 0
  "let g:ctrlp_working_path_mode = 'ra'
  "let g:ctrlp_switch_buffer = 'et'
elseif executable('ag')
  set grepprg=ag\ --vimgrep
  let g:ackprg = &grepprg
  "let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  "let g:ctrlp_use_caching = 0
endif

cnoreabbrev rg Ack
cnoreabbrev Rg Ack
cnoreabbrev ag Ack
cnoreabbrev Ag Ack

let g:EasyMotion_do_mapping = 0 " Disable default mappings
let g:EasyMotion_smartcase = 1 " Turn on case insensitive feature

" move forward to {char}
map  f <Plug>(easymotion-bd-f)
nmap f <Plug>(easymotion-overwin-f)

" move to {char}
"map  s <Plug>(easymotion-bd-f2)
"nmap s <Plug>(easymotion-overwin-f2)

nmap <LocalLeader>w <Plug>(easymotion-bd-w)

" Move to line
"map <LocalLeader>l <Plug>(easymotion-bd-jk)
"nmap <LocalLeader>l <Plug>(easymotion-overwin-line)

" JK motions: Line motions
map <LocalLeader>j <Plug>(easymotion-j)
map <LocalLeader>k <Plug>(easymotion-k)

map  <LocalLeader>f <Plug>(easymotion-sn)
omap <LocalLeader>f <Plug>(easymotion-tn)

cmap j <Down>
cmap k <Up>

" let g:gitgutter_sign_column_always = 1

" to update gitgutter signs faster
" set updatetime=500

" gitgutter show on save only
autocmd BufWritePost * GitGutter

" File-type highlighting and configuration.
" Run :filetype (without args) to see what you may have
" to turn on yourself, or just set them all to be sure.
syntax on
filetype on
filetype plugin on
" filetype indent on

" set omnifunc=syntaxcomplete#Complete

" force 256 colors in console
set t_Co=256
" do not clear terminal
" set t_ti=
" set t_te=

" Enable screen swapping {{{3
" which seems missing in the linux terminfo entry
" help xterm-screens for more info
"if &term ==? 'linux'
"    set t_ti=[?1049h
"    set t_te=[?1049l
"endif

" Extended matching with %
runtime macros/matchit.vim

"-------------------------
" –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
"-------------------------

" –í–∫–ª—é—á–∞–µ–º –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å Vi (–∏–±–æ Vi –Ω–∞–º –∏ –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è).
set nocompatible

" –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –≤—Å—ë –≤—Ä–µ–º—è.
 set ruler

" –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Å—Ç–∞—Ç—É—Å–±–∞—Ä–µ
 set showcmd

" line numbers
set nu

" –§–æ–ª–¥–∏–Ω–≥ –ø–æ –æ—Ç—Å—É–ø–∞–º
"set foldmethod=indent

" –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–±–æ—Ä—É —Ç–µ–∫—Å—Ç–∞ (–æ—á–µ–Ω—å –ø–æ–ª–µ–∑–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
set incsearch

" –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥—Å—Ç–≤–µ—Ç–∫—É –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –∏ —Ç–∞–∫ –≤—Å—ë –≤–∏–¥–Ω–æ.
set nohlsearch

" –¢–µ–ø–µ—Ä—å –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–≤–∏–≥–∞—Ç—å –∫—É—Ä—Å–æ—Ä –∫ –∫—Ä–∞—é —ç–∫—Ä–∞–Ω–∞, —á—Ç–æ–±—ã –ø–æ–¥–Ω—è—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"set scrolljump=7

" –¢–µ–ø–µ—Ä—å –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥–≤–∏–≥–∞—Ç—å –∫—É—Ä—Å–æ—Ä –∫ –∫—Ä–∞—é —ç–∫—Ä–∞–Ω–∞, —á—Ç–æ–±—ã –æ–ø—É—Å—Ç–∏—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
set scrolloff=3

" set textwidth=100

" –í—ã–∫–ª—é—á–∞–µ–º –Ω–∞–¥–æ–µ–¥–ª–∏–≤—ã–π "–∑–≤–æ–Ω–æ–∫"
set visualbell
set t_vb=

" –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º—ã—à–∏
set mouse=a
set mousemodel=popup

" –ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
set termencoding=utf-8

" –ù–µ –≤—ã–≥—Ä—É–∂–∞—Ç—å –±—É—Ñ–µ—Ä, –∫–æ–≥–¥–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π
" –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –º–æ–º–µ–Ω—Ç –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–∂–¥—ã–π —Ä–∞–∑
" –∫–æ–≥–¥–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—à—å—Å—è –º–µ–∂–¥—É –Ω–∏–º–∏
set hidden

" –°–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å –≤ gui –≤–µ—Ä—Å–∏–∏ –∏–±–æ –æ–Ω–∞ –Ω–µ –Ω—É–∂–Ω–∞
set guioptions-=T

" –°–¥–µ–ª–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∫–æ–º–∞–Ω–¥ –≤—ã—Å–æ—Ç–æ–π –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
"set ch=1

" –°–∫—Ä—ã–≤–∞—Ç—å —É–∫–∞–∑–∞—Ç–µ–ª—å –º—ã—à–∏, –∫–æ–≥–¥–∞ –ø–µ—á–∞—Ç–∞–µ–º
set mousehide

" –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ—Ç—Å—Ç—É–ø—ã
set autoindent

" Automatically write buffer before special actions
set autowrite

" Automatically read buffer (useful for doing ":!svn ci" when svn:keywords are substituted"
set autoread

" allow to use backspace instead of "x"
set backspace=indent,eol,start whichwrap+=<,>,[,]

" –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¢–∞–±–∞ –≤ –ø—Ä–æ–±–µ–ª—ã
set expandtab

" –†–∞–∑–º–µ—Ä —Ç–∞–±—É–ª—è—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
set shiftwidth=2
set softtabstop=2
set tabstop=2

" –§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
"set statusline=%<%f%h%m%r\ %b\ %{&encoding}\ 0x\ \ %l,%c%V\ %P
"set laststatus=2

" –í–∫–ª—é—á–∞–µ–º "—É–º–Ω—ã–µ" –æ—Ç—Å–ø—É–ø—ã ( –Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–≤—Ç–æ–æ—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ {)
set smartindent

" Fix <Enter> for comment
set fo+=cr

" –û–ø—Ü–∏–∏ —Å–µ—Å—Å—Å–∏–π
set sessionoptions=curdir,buffers,tabpages

" Expand history
set history=1000

" set cursorline

"-------------------------
" –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à—ã
"-------------------------

" –ü—Ä–æ–±–µ–ª –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
" nmap <Space> <PageDown>

" C-c and C-v - Copy/Paste –≤ "–≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–ø–±–æ—Ä–¥"
" vmap <C-C> "+yi
" imap <C-V> <esc>"+gPi

" –ó–∞—Å—Ç–∞–≤–ª—è–µ–º shift-insert —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –≤ Xterm
map <S-Insert> <MiddleMouse>

" –ü–æ–∏—Å–∫ –∏ –∑–∞–º–µ–Ω–∞ —Å–ª–æ–≤–∞ –ø–æ–¥ –∫—É—Ä—Å–æ—Ä–æ–º
nmap <C-K> :%s/\<<c-r>=expand("<cword>")<cr>\>/
"nmap <C-F> :FufFile **/<cr>
nmap <C-L> :FufLine<cr>
"nmap <C-B> :FufBuffer<cr>

" I found this map works for Ctrl-Space : 
"nnoremap <C-@> i
inoremap <C-@> <Esc>

nnoremap <LocalLeader>a :Ack<CR>
noremap <LocalLeader>u :w<CR>

let g:toggle_list_no_mappings = 1
nmap <script> <silent> <F3> :call ToggleQuickfixList()<CR>
nmap <script> <silent> <LocalLeader>q :call ToggleQuickfixList()<CR>
nmap <script> <silent> <LocalLeader>l :call ToggleLocationList()<CR>

map <LocalLeader>r :set nu!<CR>

" F5 - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –±—É—Ñ–µ—Ä–æ–≤
nmap <F5> <Esc>:BufExplorer<cr>
vmap <F5> <esc>:BufExplorer<cr>
imap <F5> <esc><esc>:BufExplorer<cr>

let HlUnderCursor=1
autocmd CursorMoved * exe exists("HlUnderCursor")?HlUnderCursor?printf('match IncSearch /\V\<%s\>/', escape(expand('<cword>'), '/\')):'match none':""
nnoremap <silent> <F8> :exe "let HlUnderCursor=exists(\"HlUnderCursor\")?HlUnderCursor*-1+1:1"<CR>

function MakeAndShowError()
  make
"  if &filetype == "ocaml"
"    cla
"  else
"    cr
"  endif
endfunction

" F9 - "make" –∫–æ–º–∞–Ω–¥–∞
map <F9> :call MakeAndShowError()<cr>
vmap <F9> <esc>:call MakeAndShowError()<cr>i
imap <F9> <esc>:call MakeAndShowError()<cr>i
nmap <LocalLeader>m :call MakeAndShowError()<cr>

" < & > - –¥–µ–ª–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –±–ª–æ–∫–æ–≤
vmap < <gv
vmap > >gv

" –í—ã–∫–ª—é—á–∞–µ–º –Ω–µ–Ω–∞–≤–∏—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–º–µ–Ω—ã
imap <Ins> <Esc>i

" –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ (koi8-r, cp1251, cp866, utf8)
set wildmenu
set wildmode=list:longest

" –†–µ–¥–∫–æ –∫–æ–≥–¥–∞ –Ω–∞–¥–æ [ –±–µ–∑ –ø–∞—Ä—ã =)
" imap [ []<LEFT>
" –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∏ –¥–ª—è {
" imap {<CR> {<CR>}<Esc>O

" –ê–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–ª–æ–≤ –ø–æ tab =)
function InsertTabWrapper()
     let col = col('.') - 1
     if !col || getline('.')[col - 1] !~ '\k'
         return "\<tab>"
     else
         return "\<c-p>"
     endif
endfunction
"imap <tab> <c-r>=InsertTabWrapper()<cr>

" –°–ª–æ–≤–∞ –æ—Ç–∫—É–¥–∞ –±—É–¥–µ–º –∑–∞–≤–µ—Ä—à–∞—Ç—å
set complete=""
" –ò–∑ —Ç–µ–∫—É—â–µ–≥–æ –±—É—Ñ–µ—Ä–∞
set complete+=.
" –ò–∑ —Å–ª–æ–≤–∞—Ä—è
set complete+=k
" –ò–∑ –¥—Ä—É–≥–∏—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –±—É—Ñ–µ—Ä–æ–≤
set complete+=b
" –∏–∑ —Ç–µ–≥–æ–≤
set complete+=t

au BufRead,BufNewFile *.f            set filetype=forth
au BufRead,BufNewFile *.F            set filetype=forth
au BufRead,BufNewFile *.spf          set filetype=forth
au BufRead,BufNewFile *.md           set filetype=mkd tw=140
au BufRead,BufNewFile *.brtx         set filetype=bracetax tw=140
au BufRead,BufNewFile *.wml          set textwidth=140
au BufRead,BufNewFile *.ml4,*.mlp    set filetype=ocaml

" set list listchars=tab:¬ª¬∑,trail:¬∑

" highlight trailing spaces
au BufNewFile,BufRead * let b:mtrailingws=matchadd('ErrorMsg', '\s\+$', -1)

" highlight line length limit
autocmd ColorScheme * highlight OverLength ctermbg=grey ctermfg=white
autocmd ColorScheme * match OverLength /\%141v/

let g:opamshare = substitute(system('opam config var share'),'\n$','','''')
execute "set rtp+=" . g:opamshare . "/merlin/vim"

" :execute "helptags " . g:opamshare . "/merlin/vim/doc"


let g:merlin_split_method = 'never'

let g:merlin_textobject_grow   = 'm'
let g:merlin_textobject_shrink = 'M'

"nnoremap <LocalLeader>d :Locate<cr>

"au BufWinEnter * call matchadd('ErrorMsg', '\%>100v.\+', -1)

set completeopt-=preview
set completeopt+=longest
" set mps-=[:]

au BufReadPost *.pdf silent %!pdftotext -nopgbrk "%" - |fmt -csw78
au BufReadPost *.doc silent %!antiword "%"

" For 'view' mode
if &readonly == 1
" —É–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫
set nonumber
" –Ω–µ —Å–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –±–ª–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞
set nofoldenable
" –¥–µ–ª–∞–µ–º –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞ –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
" set foldcolumn=10
" –±—ã—Å—Ç—Ä—ã–π –≤—ã—Ö–æ–¥
" nmap <F10> :qa<cr>
" –ø–µ—Ä–µ–º–æ—Ç–∫–∞ –ø–æ –ü—Ä–æ–±–µ–ª—É
nmap <Space> <PageDown>
endif

:set clipboard=unnamed,exclude:cons\|linux

" http://mikhailian.livejournal.com/2050.html

   map —ë `
   map –π q
   map —Ü w
   map —É e
   map –∫ r
   map –µ t
   map –Ω y
   map –≥ u
   map —à i
   map —â o
   map –∑ p
   map —Ö [
   map —ä ]

   map —Ñ a
   map —ã s
   map –≤ d
   map –∞ f
   map –ø g
   map —Ä h
   map –æ j
   map –ª k
   map –¥ l
   map –∂ ;
   map —ç '

   map —è z
   map —á x
   map —Å c
   map –º v
   map –∏ b
   map —Ç n
   map —å m
   map –± ,
   map —é .

   map –Å ~
   map –ô Q
   map –¶ W
   map –£ E
   map –ö R
   map –ï T
   map –ù Y
   map –ì U
   map –® I
   map –© O
   map –ó P
   map –• {
   map –™ }

   map –§ A
   map –´ S
   map –í D
   map –ê F
   map –ü G
   map –† H
   map –û J
   map –õ K
   map –î L
   map –ñ :
   map –≠ "

   map –Ø Z
   map –ß X
   map –° C
   map –ú V
   map –ò B
   map –¢ N
   map –¨ M
   map –ë <
   map –Æ >

let g:es_library_path="/home/user/.vim/bundle/vim-elasticsearch/es_keyword.txt"

" To install Pathogen for VIM
" see https://github.com/tpope/vim-pathogen
" mkdir -p ~/.vim/autoload ~/.vim/bundle && \
" curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
" Plugins I use:
" ack.vim
" neoformat
" supertab
" syntastic
" vim-bracketed-paste
" vim-easymotion
" vim-fugitive
" vim-gitgutter
" vim-ocaml
" vim-redact-pass
" vim-repeat
" vim-speeddating
" vim-surround
" vim-togglelist
" vim-unimpaired
" vim-sensible
"
" Example to install:
" cd ~/.vim/bundle && \
" git clone https://github.com/tpope/vim-sensible.git
